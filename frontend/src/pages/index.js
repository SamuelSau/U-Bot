import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { useState, useEffect } from 'react';
import {
	Modal,
	Menu,
	Container,
	Dropdown,
	Button,
	Input,
	TextArea,
} from 'semantic-ui-react';
import Link from 'next/link';
import navbarStyles from '../styles/Navbar.module.css';
import dynamic from 'next/dynamic';
import { Grid } from 'semantic-ui-react';

//whenever text changes, log it

//import VoiceRecorder from '@/components/VoiceRecorder'
const DynamicVoiceRecorder = dynamic(
	() => import('@/components/RecordingComponent'),
	{
		ssr: false,
		loading: () => <p>Loading...</p>,
	}
);

export default function Home() {
	const [text, setText] = useState('');
	const [modalIsOpen, setModalIsOpen] = useState(false);

	const handleTextChange = (event) => {
		setText(event.target.value);
	};

	const handleModalClose = () => {
		console.log('Modal closed');
		// SEND PERSONALITY DESCRIPTION TO BACKEND
	};
	const [selectedOption, setSelectedOption] = useState('');


	const updateElevenLabsURL = async (option) => {
		setSelectedOption(option);
	
		const response = await fetch('http://127.0.0.1:8000/api/update-variable/', {
		  method: 'POST',
		  body: JSON.stringify({ new_url: option }),
		  headers: {
			'Content-Type': 'application/json'
		  }
		});
		console.log("responseeeeeee")
		console.log(response)
		if (!response.ok) {
			console.log("ERROR OCCURED WHEN TRYING TO CHANGE VOICE ON FRONT END")
		  // handle error
		}
	  };
	const endSession = async () => {
		try {
			const response = await fetch('http://127.0.0.1:8000/api/end_session/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
			});

			if (response.ok) {
				// The session has ended successfully, refresh the page
				window.location.reload();
			} else {
				console.error('Error ending session:', response.statusText);
			}
		} catch (error) {
			console.error('Error ending session:', error);
		}
	};

	// EXAMPLE TEXT
	const [chatMessages, setChatMessages] = useState([]);

	const handleMessagesUpdate = (newMessages) => {
		setChatMessages(newMessages); // Update the chat box with new messages
	};

	useEffect(() => {
		console.log(text);
	}, [text]);

	return (
		<>
			<Head>
				;<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className={styles.main}>
				<Menu fixed='top' inverted>
					<Container
						className={navbarStyles.menuContainer}
						style={{
							display: 'flex',
							justifyContent: 'center',
							alignItems: 'center',
						}}
					>
						<Menu.Item
							as='a'
							header
							href='https://nextjs.org'
							className={navbarStyles.menuItem}
						>
							<h1 className={styles.title}>Welcome to U-BOT!</h1>
						</Menu.Item>
						{/* <Menu.Item className={navbarStyles.menuItem}>
      <p>Please select your voice</p>
    </Menu.Item> */}
						<Menu.Item className={navbarStyles.menuItem}>
							<Dropdown
								onChange={(e, { value }) => updateElevenLabsURL(value)}
								placeholder='Select a voice'
								selection
								options={[
									{ key: 'EXAVITQu4vr4xnSDxMaL', value: 'EXAVITQu4vr4xnSDxMaL', text: 'Bella' },
									{ key: 'VR6AewLTigWG4xSOukaG', value: 'VR6AewLTigWG4xSOukaG', text: 'Arnold' },
									{ key: 'TxGEqnHWrfWFTfGW9XjX', value: 'TxGEqnHWrfWFTfGW9XjX', text: 'Josh' },
									{ key: 'MF3mGyEYCl7XYWbV9V6O', value: 'MF3mGyEYCl7XYWbV9V6O', text: 'Elli' },
									{ key: 'ErXwobaYiN019PkySvjV', value: 'ErXwobaYiN019PkySvjV', text: 'Antoni' },
									{ key: 'AZnzlk1XvdvUeBnXmlld', value: 'AZnzlk1XvdvUeBnXmlld', text: 'Domi' },
								]}
								style={{
									display: 'flex',
									justifyContent: 'center',
									alignItems: 'center',
								}}
							/>
						</Menu.Item>
						<Modal
							closeIcon
							onClick={() => setModalIsOpen(true)}
							isOpen={modalIsOpen}
							onRequestClose={() => setModalIsOpen(false)}
							onClose={handleModalClose}
							trigger={
								<Button
									secondary
									className={navbarStyles.menuItem}
									style={{ maxWidth: '300px', width: '100%', fontSize: '24px' }}
								>
									Edit Personality
								</Button>
							}
						>
							<Modal.Header>Personality Description</Modal.Header>
							<Modal.Content>
								<TextArea
									placeholder='Enter your text'
									rows={10}
									style={{ width: '100%' }}
									value={text}
									onChange={handleTextChange}
								/>
							</Modal.Content>
						</Modal>
					</Container>
				</Menu>

				<main className={styles.main}>
					{/* ... */}
					<Grid stackable columns={2} divided>
						<Grid.Column>
							<h1>Voice Recorder</h1>
							<DynamicVoiceRecorder onMessagesUpdate={handleMessagesUpdate} />
						</Grid.Column>
						<Grid.Column>
							<h1>Chat</h1>
							<div className={styles.chatBox}>
								{chatMessages.map((message, index) => {
									if (index === 0) {
										return null;
									}

									return (
										<div
											key={index}
											className={`${styles.message} ${styles[message.role]}`}
										>
											{message.content}
										</div>
									);
								})}
							
							</div>
							<button className={styles.clearButton} onClick={endSession}>Clear Conversation</button>
						</Grid.Column>
					</Grid>
				</main>
			</main>
		</>
	);
}
